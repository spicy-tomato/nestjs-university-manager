datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  password String
  salt     String
  role     Role
  profile  Profile?
}

model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  middleName  String?
  lastName    String
  phoneNumber String?  @unique
  isMale      Boolean
  address     String?
  teacher     Teacher?
  student     Student?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.ObjectId
}

model Teacher {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  teacherId            String                 @unique
  profile              Profile                @relation(fields: [profileId], references: [id])
  profileId            String                 @unique @db.ObjectId
  courseClasses        CourseClass[]
  sessions             Session[]
  changeSessionRequest ChangeSessionRequest[]
}

model Student {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  studentId         String          @unique
  score             Score[]
  profile           Profile         @relation(fields: [profileId], references: [id])
  profileId         String          @unique @db.ObjectId
  managementClass   ManagementClass @relation(fields: [managementClassId], references: [id])
  managementClassId String          @db.ObjectId
  courseClasses     CourseClass[]   @relation(fields: [courseClassIds], references: [id])
  courseClassIds    String[]        @db.ObjectId
}

model Program {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  code              String            @unique
  name              String            @unique
  createdAt         DateTime          @default(now())
  deletedAt         DateTime?
  courses           Course[]          @relation(fields: [courseIds], references: [id])
  courseIds         String[]          @db.ObjectId
  managementClasses ManagementClass[]
}

model AcademicYear {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String            @unique
  code              String            @unique
  startYear         Int               @unique
  endYear           Int
  isCurrent         Boolean
  managementClasses ManagementClass[]
  courseClass       CourseClass[]
}

model ManagementClass {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  code           String       @unique
  name           String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String       @db.ObjectId
  program        Program      @relation(fields: [programId], references: [id])
  programId      String       @db.ObjectId
  students       Student[]
}

model Course {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  code          String        @unique
  name          String
  createdAt     DateTime      @default(now())
  deletedAt     DateTime?
  programs      Program[]     @relation(fields: [programIds], references: [id])
  programIds    String[]      @db.ObjectId
  courseClasses CourseClass[]
}

model CourseClass {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  code           String       @unique
  name           String
  startAt        DateTime
  endAt          DateTime?
  sessionCount   Int
  course         Course       @relation(fields: [courseId], references: [id])
  courseId       String       @db.ObjectId
  teacher        Teacher?     @relation(fields: [teacherId], references: [id])
  teacherId      String?      @db.ObjectId
  students       Student[]    @relation(fields: [studentIds], references: [id])
  studentIds     String[]     @db.ObjectId
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String       @db.ObjectId
  sessions       Session[]
  isoSlots       Slot[]
  score          Score[]
}

model Session {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  courseClass           CourseClass            @relation(fields: [courseClassId], references: [id])
  courseClassId         String                 @db.ObjectId
  startAt               DateTime
  endAt                 DateTime
  substituteTeacher     Teacher?               @relation(fields: [substituteTeacherId], references: [id])
  substituteTeacherId   String?                @db.ObjectId
  changeSessionRequests ChangeSessionRequest[]
}

model ChangeSessionRequest {
  id                  String                     @id @default(auto()) @map("_id") @db.ObjectId
  oldStartAt          DateTime
  oldEndAt            DateTime
  newStartAt          DateTime
  newEndAt            DateTime
  status              ChangeSessionRequestStatus
  createdAt           DateTime                   @default(now())
  substituteTeacher   Teacher?                   @relation(fields: [substituteTeacherId], references: [id])
  substituteTeacherId String?                    @db.ObjectId
  session             Session                    @relation(fields: [sessionId], references: [id])
  sessionId           String                     @db.ObjectId
}

model Score {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  score         Float?
  student       Student     @relation(fields: [studentId], references: [id])
  studentId     String      @db.ObjectId
  courseClass   CourseClass @relation(fields: [courseClassId], references: [id])
  courseClassId String      @db.ObjectId
}

enum Role {
  SystemAdmin
  Admin
  Teacher
  Student
}

enum ChangeSessionRequestStatus {
  Pending
  Approved
  Rejected
  Cancelled
}

type Slot {
  startAt String
  endAt   String
}
