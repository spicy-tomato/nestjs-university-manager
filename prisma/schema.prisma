datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  password String
  salt     String
  role     Role
  profile  Profile?
}

model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  middleName  String?
  lastName    String
  email       String   @unique
  phoneNumber String?  @unique
  password    String
  isMale      Boolean
  address     String?
  teacher     Teacher?
  student     Student?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.ObjectId
}

model Teacher {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  teacherId            String                 @unique
  profile              Profile                @relation(fields: [profileId], references: [id])
  profileId            String                 @unique @db.ObjectId
  courseClasses        CourseClass[]
  sessions             Session[]
  ChangeSessionRequest ChangeSessionRequest[]
}

model Student {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  studentId         String          @unique
  score             Score[]
  profile           Profile         @relation(fields: [profileId], references: [id])
  profileId         String          @unique @db.ObjectId
  managementClass   ManagementClass @relation(fields: [managementClassId], references: [id])
  managementClassId String          @db.ObjectId
  courseClasses     CourseClass[]
}

model Program {
  id                  String                   @id @default(auto()) @map("_id") @db.ObjectId
  code                String                   @unique
  name                String                   @unique
  createdAt           DateTime                 @default(now())
  deletedAt           DateTime?
  courses             Course[]                 @relation(fields: [courseIds], references: [id])
  courseIds           String[]                 @db.ObjectId
  managementClasses ManagementClassProgram[]
}

model AcademicYear {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String            @unique
  code              String            @unique
  startYear         Int               @unique
  endYear           Int
  isCurrent         Boolean
  managementClasses ManagementClass[]
}

model ManagementClass {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  code           String       @unique
  name           String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String       @db.ObjectId
  students       Student[]
}

model Course {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  code          String
  name          String
  createdAt     DateTime      @default(now())
  deletedAt     DateTime?
  programs      Program[]     @relation(fields: [programIds], references: [id])
  programIds    String[]      @db.ObjectId
  courseClasses CourseClass[]
}

model CourseClass {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  code         String
  name         String
  startAt      DateTime
  endAt        DateTime
  sessionCount Int
  course       Course    @relation(fields: [courseId], references: [id])
  courseId     String    @db.ObjectId
  teacher      Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId    String?   @db.ObjectId
  student      Student?  @relation(fields: [studentId], references: [id])
  studentId    String?   @db.ObjectId
  sessions     Session[]
  slots        Slot[]
}

model Session {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  courseClass       CourseClass @relation(fields: [courseClassId], references: [id])
  courseClassId     String      @db.ObjectId
  slot              Slot        @relation(fields: [slotId], references: [id])
  slotId            String      @db.ObjectId
  substituteTeacher Teacher     @relation(fields: [teacherId], references: [id])
  teacherId         String      @db.ObjectId
}

model Slot {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  code                    String                 @unique
  weekDay                 Int
  daySlot                 Int
  startAt                 DateTime
  endAt                   DateTime
  sessions                Session[]
  courseClass             CourseClass?           @relation(fields: [courseClassId], references: [id])
  courseClassId           String?                @db.ObjectId
  OldChangeSessionRequest ChangeSessionRequest[] @relation(name: "OldSlot")
  NewChangeSessionRequest ChangeSessionRequest[] @relation(name: "NewSlot")
}

model ChangeSessionRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  oldTime     DateTime
  oldSlot     Slot     @relation(fields: [oldSlotId], references: [id], name: "OldSlot")
  oldSlotId   String   @db.ObjectId
  newTime     DateTime
  newSlot     Slot     @relation(fields: [newSlotId], references: [id], name: "NewSlot")
  newSlotId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  createdBy   Teacher  @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
}

enum Role {
  SystemAdmin
  Admin
  Teacher
  Student
}

enum ChangeSessionRequestStatus {
  Pending
  Accepted
  Rejected
  Cancelled
}

type ManagementClassProgram {
  managementClassId String
  semester          Int
}

type Score {
  courseClassId   String
  courseClassName String
  score           Int
}
